// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CLIENT
  PROFESSIONAL
}

model User {
  id                      String    @id @default(uuid())
  email                   String    @unique
  passwordHash            String?
  emailVerified          DateTime?
  emailVerificationToken  String?
  emailVerificationExpires DateTime?
  passwordResetToken     String?
  passwordResetExpires   DateTime?
  fullName               String
  image                  String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  // Relations
  roles                  UserRole[]
  profiles               Profile[]
  sessions              Session[]
  accounts              Account[]
  clientBookings        Booking[]  @relation("ClientBookings")
  professionalBookings  Booking[]  @relation("ProfessionalBookings")
}

model UserRole {
  id        String   @id @default(uuid())
  userId    String
  role      Role     @default(CLIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, role])
}

model Profile {
  id          String   @id @default(uuid())
  userId      String
  profession  String
  bio         String?
  hourlyRate  Decimal? @db.Decimal(10, 2)
  avatarUrl   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id])
  availabilities Availability[]

  @@index([userId])
}

model Availability {
  id          String    @id @default(uuid())
  profileId   String
  profile     Profile   @relation(fields: [profileId], references: [id])
  dayOfWeek   Int       // 1-7 representing Monday-Sunday
  startHour   Int       // 0-23 representing hour of day
  startMinute Int       // 0-59 representing minutes
  endHour     Int       // 0-23 representing hour of day
  endMinute   Int       // 0-59 representing minutes
  createdAt   DateTime  @default(now())
}

model Booking {
  id              String    @id @default(uuid())
  clientId        String
  client          User      @relation("ClientBookings", fields: [clientId], references: [id])
  professionalId  String
  professional    User      @relation("ProfessionalBookings", fields: [professionalId], references: [id])
  startTime       DateTime
  endTime         DateTime
  status          BookingStatus
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Session {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  token       String    @unique
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
