{
  "openapi": "3.0.0",
  "paths": {
    "/auth/me": {
      "get": {
        "operationId": "AuthController_getProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns the current user profile"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "summary": "Get current user profile",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/register": {
      "post": {
        "operationId": "AuthController_register",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully registered"
          },
          "400": {
            "description": "Bad request - validation error"
          },
          "409": {
            "description": "Email already exists"
          }
        },
        "summary": "Register a new user",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/login": {
      "post": {
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully logged in",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "summary": "Login user",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/verify-email": {
      "post": {
        "operationId": "AuthController_verifyEmail",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEmailDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Email successfully verified"
          },
          "400": {
            "description": "Bad request - invalid or expired token"
          }
        },
        "summary": "Verify email address",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/forgot-password": {
      "post": {
        "operationId": "AuthController_forgotPassword",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Password reset email sent"
          }
        },
        "summary": "Request password reset",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/reset-password": {
      "post": {
        "operationId": "AuthController_resetPassword",
        "parameters": [
          {
            "name": "token",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Password successfully reset"
          },
          "400": {
            "description": "Bad request - invalid or expired token"
          }
        },
        "summary": "Reset password with token",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/refresh": {
      "post": {
        "operationId": "AuthController_refreshToken",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Tokens successfully refreshed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid refresh token"
          }
        },
        "summary": "Refresh access token",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/check-username/{username}": {
      "get": {
        "operationId": "AuthController_checkUsername",
        "parameters": [
          {
            "name": "username",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns true if username is available"
          }
        },
        "summary": "Check username availability",
        "tags": [
          "auth"
        ]
      }
    },
    "/profile": {
      "get": {
        "operationId": "ProfileController_getProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns the current user profile"
          }
        },
        "summary": "Get current user profile",
        "tags": [
          "profile"
        ]
      },
      "put": {
        "operationId": "ProfileController_updateProfile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated profile"
          }
        },
        "summary": "Update current user profile",
        "tags": [
          "profile"
        ]
      }
    },
    "/profile/{userId}": {
      "get": {
        "operationId": "ProfileController_getPublicProfile",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the public profile"
          }
        },
        "summary": "Get public profile by user ID",
        "tags": [
          "profile"
        ]
      }
    },
    "/profile/social-links": {
      "post": {
        "operationId": "ProfileController_addSocialLink",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSocialLinkDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the created social link"
          }
        },
        "summary": "Add a social link",
        "tags": [
          "profile"
        ]
      }
    },
    "/profile/social-links/{id}": {
      "put": {
        "operationId": "ProfileController_updateSocialLink",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSocialLinkDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated social link"
          }
        },
        "summary": "Update a social link",
        "tags": [
          "profile"
        ]
      },
      "delete": {
        "operationId": "ProfileController_deleteSocialLink",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the deleted social link"
          }
        },
        "summary": "Delete a social link",
        "tags": [
          "profile"
        ]
      }
    },
    "/profile/availability": {
      "post": {
        "operationId": "ProfileController_addAvailability",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAvailabilityDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the created availability slot"
          }
        },
        "summary": "Add an availability slot",
        "tags": [
          "profile"
        ]
      }
    },
    "/profile/availability/{id}": {
      "put": {
        "operationId": "ProfileController_updateAvailability",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAvailabilityDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated availability slot"
          }
        },
        "summary": "Update an availability slot",
        "tags": [
          "profile"
        ]
      },
      "delete": {
        "operationId": "ProfileController_deleteAvailability",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the deleted availability slot"
          }
        },
        "summary": "Delete an availability slot",
        "tags": [
          "profile"
        ]
      }
    }
  },
  "info": {
    "title": "Consultation API",
    "description": "The consultation platform API description",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "auth",
      "description": "Authentication endpoints"
    },
    {
      "name": "users",
      "description": "User management endpoints"
    },
    {
      "name": "bookings",
      "description": "Booking management endpoints"
    }
  ],
  "servers": [
    {
      "url": "http://localhost:3001",
      "description": "Local development"
    },
    {
      "url": "https://api.consultation-platform.com",
      "description": "Production"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "RegisterDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "username",
          "password",
          "fullName"
        ]
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "AuthResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object"
          },
          "accessToken": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          }
        },
        "required": [
          "user",
          "accessToken",
          "refreshToken"
        ]
      },
      "VerifyEmailDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        },
        "required": [
          "token"
        ]
      },
      "ForgotPasswordDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ]
      },
      "ResetPasswordDto": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          }
        },
        "required": [
          "password"
        ]
      },
      "RefreshTokenDto": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string"
          }
        },
        "required": [
          "refreshToken"
        ]
      },
      "UpdateProfileDto": {
        "type": "object",
        "properties": {
          "bio": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "profession": {
            "type": "string"
          }
        }
      },
      "CreateSocialLinkDto": {
        "type": "object",
        "properties": {
          "platform": {
            "type": "string",
            "enum": [
              "TWITTER",
              "LINKEDIN",
              "GITHUB",
              "WEBSITE"
            ]
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "platform",
          "url"
        ]
      },
      "UpdateSocialLinkDto": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          }
        }
      },
      "CreateAvailabilityDto": {
        "type": "object",
        "properties": {
          "dayOfWeek": {
            "type": "number",
            "description": "Day of week (1-7, Monday-Sunday)",
            "minimum": 1,
            "maximum": 7
          },
          "startHour": {
            "type": "number",
            "description": "Start hour (0-23)",
            "minimum": 0,
            "maximum": 23
          },
          "startMinute": {
            "type": "number",
            "description": "Start minute (0-59)",
            "minimum": 0,
            "maximum": 59
          },
          "endHour": {
            "type": "number",
            "description": "End hour (0-23)",
            "minimum": 0,
            "maximum": 23
          },
          "endMinute": {
            "type": "number",
            "description": "End minute (0-59)",
            "minimum": 0,
            "maximum": 59
          }
        },
        "required": [
          "dayOfWeek",
          "startHour",
          "startMinute",
          "endHour",
          "endMinute"
        ]
      },
      "UpdateAvailabilityDto": {
        "type": "object",
        "properties": {
          "startHour": {
            "type": "number",
            "description": "Start hour (0-23)",
            "minimum": 0,
            "maximum": 23
          },
          "startMinute": {
            "type": "number",
            "description": "Start minute (0-59)",
            "minimum": 0,
            "maximum": 59
          },
          "endHour": {
            "type": "number",
            "description": "End hour (0-23)",
            "minimum": 0,
            "maximum": 23
          },
          "endMinute": {
            "type": "number",
            "description": "End minute (0-59)",
            "minimum": 0,
            "maximum": 59
          }
        }
      }
    }
  }
}